using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection.Emit;
using System.Text;
using System.Threading.Tasks;
using DataLayer.Models;
using System.Net.Sockets;

namespace DataLayer.Database
{
    public class DatabaseContext : DbContext
    {
        public DbSet<Ticket> Tickets { get; set; }
        public DbSet<Car> Cars { get; set; }
        public DbSet<Book> Books { get; set; }

        // DbContextOptionsBuilder - Provides a simple API surface for configuring DbContextOptions.
        // Databases typically define extension methods on this object that allow you to configure the
        // database connection to be used for a context.
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            // Environment - Provides information about, and means to manipulate, the current environment and platform
            string solutionFolder = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
            string databaseFile = "FilterDB.db";
            string databasePath = Path.Combine(solutionFolder, databaseFile);
            optionsBuilder.UseSqlite($"Data Source={databasePath}");
        }

        // configure the model that is used to map the entities to database tables
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Ticket>().Property(e => e.Id).ValueGeneratedOnAdd(); // the Id value generated by the database when a new entity is added 
            modelBuilder.Entity<Car>().Property(e => e.Id).ValueGeneratedOnAdd();
            modelBuilder.Entity<Book>().Property(e => e.Id).ValueGeneratedOnAdd();
        }

        public override int SaveChanges()
        {
            return base.SaveChanges(); //The base keyword is used to access members of the base class (DbContext)
        }
    }
}
