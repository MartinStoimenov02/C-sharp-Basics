using DataLayer.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using System;
using System.IO;
using Welcome.Others;

namespace DataLayer.Database
{
    // A DbContext instance represents a combination of the Unit Of Work and Repository patterns
    // such that it can be used to query from a database and group together changes that will then
    // be written back to the store as a unit. DbContext is conceptually similar to ObjectContext.
    public class DatabaseContext : DbContext
    {
        public DbSet<DatabaseUser> Users { get; set; }
        public DbSet<LogEntry> LogEntries { get; set; }

        // DbContextOptionsBuilder - Provides a simple API surface for configuring DbContextOptions.
        // Databases typically define extension methods on this object that allow you to configure the
        // database connection to be used for a context.
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            // Environment - Provides information about, and means to manipulate, the current environment and platform
            string solutionFolder = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
            string databaseFile = "Welcome.db";
            string databasePath = Path.Combine(solutionFolder, databaseFile);
            optionsBuilder.UseSqlite($"Data Source={databasePath}");
        }

        // configure the model that is used to map the entities to database tables
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<DatabaseUser>().Property(e => e.Id).ValueGeneratedOnAdd(); // the Id value generated by the database when a new entity is added 

            var user = new DatabaseUser()
            {
                Id = 1,
                Name = "John Doe",
                Password = "1234",
                Role = UserRolesEnum.ADMIN,
                FacNum = "01201",
                Email = "johnAdmin@email.com",
                expiresDate = DateTime.Now.AddYears(10)
            };

            // This line tells Entity Framework Core to include the specified user object as seed data.
            // Seed data is data that is populated into the database when the database is initialized or migrated.
            // Automatically compute what to do: insert, update or delete
            modelBuilder.Entity<DatabaseUser>().HasData(user);

            modelBuilder.Entity<LogEntry>().Property(e => e.Id).ValueGeneratedOnAdd(); 

            var logEntry = new LogEntry()
            {
                Id = 1, // the first Id in the database
                Timestamp = DateTime.Now,
                MessageType = "User Addition",
                Message = $"Added new user: {user.Name}",
                userName = "Admin"
            };

            // This line tells Entity Framework Core to include the specified user object as seed data.
            // Seed data is data that is populated into the database when the database is initialized or migrated.
            // Automatically compute what to do: insert, update or delete
            modelBuilder.Entity<LogEntry>().HasData(logEntry);
        }

        public override int SaveChanges()
        {
            return base.SaveChanges(); //The base keyword is used to access members of the base class (DbContext)
        }
    }
}
